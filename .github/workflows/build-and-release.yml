name: Build and Release FuegoGT Wallet

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact-name: fuegogt-wallet-linux
            file-extension: AppImage
          - os: windows-latest
            platform: windows
            artifact-name: fuegogt-wallet-windows
            file-extension: exe
          - os: macos-latest
            platform: macos
            artifact-name: fuegogt-wallet-macos-apple-silicon
            file-extension: dmg
          - os: macos-13
            platform: macos
            artifact-name: fuegogt-wallet-macos-intel
            file-extension: dmg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # macOS dependencies are handled by Tauri automatically
          echo "macOS dependencies handled by Tauri"

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Windows dependencies are handled by Tauri automatically
          echo "Windows dependencies handled by Tauri"

      - name: Install frontend dependencies
        run: npm ci

      # Build-only: remove tests and static analysis for speed

      - name: Build application
        run: npm run tauri:build --if-present || npm run tauri build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/dmg/*.dmg
          if-no-files-found: error

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Linux AppImage
          if compgen -G "fuegogt-wallet-linux/*.AppImage" > /dev/null; then
            cp fuegogt-wallet-linux/*.AppImage release-assets/fuegogt-wallet-linux.AppImage
          fi
          
          # Windows executable
          if compgen -G "fuegogt-wallet-windows/*.exe" > /dev/null; then
            cp fuegogt-wallet-windows/*.exe release-assets/fuegogt-wallet-windows.exe
          fi
          
          # macOS Apple Silicon DMG
          if compgen -G "fuegogt-wallet-macos-apple-silicon/*.dmg" > /dev/null; then
            cp fuegogt-wallet-macos-apple-silicon/*.dmg release-assets/fuegogt-wallet-macos-apple-silicon.dmg
          fi

          # macOS Intel DMG
          if compgen -G "fuegogt-wallet-macos-intel/*.dmg" > /dev/null; then
            cp fuegogt-wallet-macos-intel/*.dmg release-assets/fuegogt-wallet-macos-intel.dmg
          fi
          
          # Create checksums
          cd release-assets
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" > "$file.sha256"
            fi
          done
          
          # Create release notes
          cat > RELEASE_NOTES.md << EOF
          # FuegoGT Wallet Release Notes
          
          ## Version ${{ github.event.inputs.version || github.ref_name }}
          
          ### Features
          - 🔥 **FuegoGT Desktop Wallet** - Modern, secure cryptocurrency wallet
          - 💰 **XFG Support** - Full support for Fuego cryptocurrency
          - 🔒 **Advanced Security** - Encrypted storage, session management, password validation
          - 🌍 **Multi-language** - Support for 11 languages with RTL support
          - 📊 **Real-time Sync** - Live blockchain synchronization with progress tracking
          - 💎 **Term Deposits** - Lock XFG for interest with flexible terms
          - 🔄 **Backup & Recovery** - Encrypted ZIP backups with multiple types
          - ⚡ **Performance Optimized** - Resource monitoring, caching, threading
          - 🎨 **Modern UI** - Beautiful, responsive interface with dark/light themes
          - 🔧 **Advanced Features** - Mining, address management, blockchain explorer
          
          ### Installation
          - **Linux**: Download the AppImage file and make it executable
          - **Windows**: Download the .exe file and run as administrator
          - **macOS Apple Silicon**: Download the fuegogt-wallet-macos-apple-silicon.dmg file and drag to Applications folder
          - **macOS Intel**: Download the fuegogt-wallet-macos-intel.dmg file and drag to Applications folder
          
          ### System Requirements
          - **Linux**: Ubuntu 18.04+ or equivalent
          - **Windows**: Windows 10+ (64-bit)
          - **macOS**: macOS 10.15+ (Catalina or later) - Intel and Apple Silicon supported
          
          ### Security
          All releases are cryptographically signed and checksums are provided for verification.
          
          ### Support
          For support and bug reports, please visit: https://github.com/fuego-wallet/fuego-tauri-wallet
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          name: FuegoGT Wallet ${{ github.event.inputs.version || github.ref_name }}
          body_path: release-assets/RELEASE_NOTES.md
          files: |
            release-assets/*
          draft: false
          prerelease: ${{ contains(github.event.inputs.version || github.ref_name, 'beta') || contains(github.event.inputs.version || github.ref_name, 'alpha') || contains(github.event.inputs.version || github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint --if-present

      - name: Run TypeScript check
        run: npm run type-check --if-present

      - name: Run Rust audit
        working-directory: src-tauri
        run: |
          cargo install cargo-audit
          cargo audit

      - name: Run Rust clippy
        working-directory: src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Rust fmt check
        working-directory: src-tauri
        run: cargo fmt --all -- --check
